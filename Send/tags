!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR            = ar cqs$/;"	m
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
DEFINES	Makefile	/^DEFINES       = -DQT_WEBKIT -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
FAILED	ztpmanager.h	/^        FAILED$/;"	e	enum:ZTPManager::ResultState
Fragment	ztpmanager.h	/^        Fragment(){}$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
Fragment	ztpmanager.h	/^        explicit Fragment(const QByteArray& bytes)$/;"	f	class:ZTPManager::Fragment	access:public	signature:(const QByteArray& bytes)
Fragment	ztpmanager.h	/^    class Fragment\/\/分片$/;"	c	class:ZTPManager	access:private
INCPATH	Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtNetwork -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4 -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib\/i386-linux-gnu -lQtGui -lQtNetwork -lQtCore -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
MAINWINDOW_H	mainwindow.h	2;"	d
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MTU	ztpmanager.h	/^    int MTU;$/;"	m	class:ZTPManager	access:private
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow	mainwindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c	inherits:QMainWindow
MainWindow::MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow	signature:(QWidget *parent)
MainWindow::MainWindow	mainwindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow::fun	mainwindow.cpp	/^void MainWindow::fun()$/;"	f	class:MainWindow	signature:()
MainWindow::fun	mainwindow.h	/^    void fun();$/;"	p	class:MainWindow	access:private	signature:()
MainWindow::on_pushButton_2_clicked	mainwindow.cpp	/^void MainWindow::on_pushButton_2_clicked()$/;"	f	class:MainWindow	signature:()
MainWindow::on_pushButton_2_clicked	mainwindow.h	/^    void on_pushButton_2_clicked();$/;"	p	class:MainWindow	access:private	signature:()
MainWindow::on_pushButton_clicked	mainwindow.cpp	/^void MainWindow::on_pushButton_clicked()$/;"	f	class:MainWindow	signature:()
MainWindow::on_pushButton_clicked	mainwindow.h	/^    void on_pushButton_clicked();$/;"	p	class:MainWindow	access:private	signature:()
MainWindow::ui	mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
MainWindow::ztpm	mainwindow.h	/^    ZTPManager* ztpm;$/;"	m	class:MainWindow	access:private
MainWindow::~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
MainWindow::~MainWindow	mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake-qt4$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = CustomProtocolDemo$/;"	m
RANLIB	Makefile	/^RANLIB        = $/;"	m
ResultState	ztpmanager.h	/^    enum ResultState$/;"	g	class:ZTPManager	access:public
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = main.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SUCCESS	ztpmanager.h	/^        SUCCESS,$/;"	e	enum:ZTPManager::ResultState
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
SendOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::SendOneZtp(ZTPprotocol& ztp,const QHostAddress &host,quint16 port)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp,const QHostAddress &host,quint16 port)
SendOneZtp	ztpmanager.h	/^    ResultState SendOneZtp(ZTPprotocol& ztp,const QHostAddress& host,quint16 port)$/;"	f	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp,const QHostAddress& host,quint16 port)
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = CustomProtocolDemo$/;"	m
TIMEOUT	ztpmanager.h	/^        TIMEOUT,$/;"	e	enum:ZTPManager::ResultState
Ui	mainwindow.h	/^namespace Ui {$/;"	n
ZTPMANAGER_H	ztpmanager.h	2;"	d
ZTPManager	ztpmanager.cpp	/^ZTPManager::ZTPManager(QHostAddress host,quint16 port,$/;"	f	class:ZTPManager	signature:(QHostAddress host,quint16 port, QHostAddress groupAddress, QObject *parent)
ZTPManager	ztpmanager.cpp	/^ZTPManager::ZTPManager(quint16 port,$/;"	f	class:ZTPManager	signature:(quint16 port, QHostAddress groupAddress, QObject *parent)
ZTPManager	ztpmanager.h	/^    explicit ZTPManager(QHostAddress host = QHostAddress::Any,quint16 port = 0,$/;"	p	class:ZTPManager	access:public	signature:(QHostAddress host = QHostAddress::Any,quint16 port = 0, QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0)
ZTPManager	ztpmanager.h	/^    explicit ZTPManager(quint16 port,QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0);$/;"	p	class:ZTPManager	access:public	signature:(quint16 port,QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0)
ZTPManager	ztpmanager.h	/^class ZTPManager : public QObject$/;"	c	inherits:QObject
ZTPManager::FAILED	ztpmanager.h	/^        FAILED$/;"	e	enum:ZTPManager::ResultState
ZTPManager::Fragment	ztpmanager.h	/^    class Fragment\/\/分片$/;"	c	class:ZTPManager	access:private
ZTPManager::Fragment::Fragment	ztpmanager.h	/^        Fragment(){}$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
ZTPManager::Fragment::Fragment	ztpmanager.h	/^        explicit Fragment(const QByteArray& bytes)$/;"	f	class:ZTPManager::Fragment	access:public	signature:(const QByteArray& bytes)
ZTPManager::Fragment::checksum	ztpmanager.h	/^        quint16 checksum;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::data	ztpmanager.h	/^        QByteArray data;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::fragment_count	ztpmanager.h	/^        quint16 fragment_count;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::fragment_offset	ztpmanager.h	/^        quint16 fragment_offset;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::generate	ztpmanager.h	/^        void generate()$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
ZTPManager::Fragment::generateChecksum	ztpmanager.h	/^        quint16 generateChecksum(){$/;"	f	class:ZTPManager::Fragment	access:private	signature:()
ZTPManager::Fragment::identifier	ztpmanager.h	/^        quint16 identifier;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::isValid	ztpmanager.h	/^        bool isValid(){return checksum == generateChecksum();}$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
ZTPManager::Fragment::len	ztpmanager.h	/^        quint32 len;\/\/仅数据正文长度$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::Fragment::operator <	ztpmanager.h	/^        bool operator <(const Fragment& frag)$/;"	f	class:ZTPManager::Fragment	access:public	signature:(const Fragment& frag)
ZTPManager::Fragment::rawPkg	ztpmanager.h	/^        QByteArray rawPkg;$/;"	m	class:ZTPManager::Fragment	access:public
ZTPManager::MTU	ztpmanager.h	/^    int MTU;$/;"	m	class:ZTPManager	access:private
ZTPManager::ResultState	ztpmanager.h	/^    enum ResultState$/;"	g	class:ZTPManager	access:public
ZTPManager::SUCCESS	ztpmanager.h	/^        SUCCESS,$/;"	e	enum:ZTPManager::ResultState
ZTPManager::SendOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::SendOneZtp(ZTPprotocol& ztp,const QHostAddress &host,quint16 port)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp,const QHostAddress &host,quint16 port)
ZTPManager::SendOneZtp	ztpmanager.h	/^    ResultState SendOneZtp(ZTPprotocol& ztp,const QHostAddress& host,quint16 port)$/;"	f	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp,const QHostAddress& host,quint16 port)
ZTPManager::TIMEOUT	ztpmanager.h	/^        TIMEOUT,$/;"	e	enum:ZTPManager::ResultState
ZTPManager::ZTPManager	ztpmanager.cpp	/^ZTPManager::ZTPManager(QHostAddress host,quint16 port,$/;"	f	class:ZTPManager	signature:(QHostAddress host,quint16 port, QHostAddress groupAddress, QObject *parent)
ZTPManager::ZTPManager	ztpmanager.cpp	/^ZTPManager::ZTPManager(quint16 port,$/;"	f	class:ZTPManager	signature:(quint16 port, QHostAddress groupAddress, QObject *parent)
ZTPManager::ZTPManager	ztpmanager.h	/^    explicit ZTPManager(QHostAddress host = QHostAddress::Any,quint16 port = 0,$/;"	p	class:ZTPManager	access:public	signature:(QHostAddress host = QHostAddress::Any,quint16 port = 0, QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0)
ZTPManager::ZTPManager	ztpmanager.h	/^    explicit ZTPManager(quint16 port,QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0);$/;"	p	class:ZTPManager	access:public	signature:(quint16 port,QHostAddress groupAddress = QHostAddress::Any, QObject *parent = 0)
ZTPManager::_Socketlistener	ztpmanager.h	/^    QUdpSocket _Socketlistener;$/;"	m	class:ZTPManager	access:private
ZTPManager::getOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::getOneZtp(ZTPprotocol& ztp)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp)
ZTPManager::getOneZtp	ztpmanager.h	/^    ResultState getOneZtp(ZTPprotocol& ztp);\/\/异步读取$/;"	p	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp)
ZTPManager::onRead	ztpmanager.h	/^    void onRead();$/;"	p	class:ZTPManager	access:private	signature:()
ZTPManager::readyRead	ztpmanager.h	/^    void readyRead();$/;"	p	class:ZTPManager	access:private	signature:()
ZTPManager::waitOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::waitOneZtp(ZTPprotocol& ztp,int msecs)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp,int msecs)
ZTPManager::waitOneZtp	ztpmanager.h	/^    ResultState waitOneZtp(ZTPprotocol& ztp,int msecs = 3000);\/\/同步读取$/;"	p	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp,int msecs = 3000)
ZTPManager::ztpList	ztpmanager.h	/^    QList<QByteArray> ztpList;$/;"	m	class:ZTPManager	access:private
ZTPPROTOCOL_H	ztpprotocol.h	2;"	d
ZTPprotocol	ztpprotocol.cpp	/^ZTPprotocol::ZTPprotocol(QByteArray &bytes)$/;"	f	class:ZTPprotocol	signature:(QByteArray &bytes)
ZTPprotocol	ztpprotocol.h	/^    ZTPprotocol(){}$/;"	f	class:ZTPprotocol	access:public	signature:()
ZTPprotocol	ztpprotocol.h	/^    explicit ZTPprotocol(QByteArray& bytes);$/;"	p	class:ZTPprotocol	access:public	signature:(QByteArray& bytes)
ZTPprotocol	ztpprotocol.h	/^class ZTPprotocol$/;"	c
ZTPprotocol::ZTPprotocol	ztpprotocol.cpp	/^ZTPprotocol::ZTPprotocol(QByteArray &bytes)$/;"	f	class:ZTPprotocol	signature:(QByteArray &bytes)
ZTPprotocol::ZTPprotocol	ztpprotocol.h	/^    ZTPprotocol(){}$/;"	f	class:ZTPprotocol	access:public	signature:()
ZTPprotocol::ZTPprotocol	ztpprotocol.h	/^    explicit ZTPprotocol(QByteArray& bytes);$/;"	p	class:ZTPprotocol	access:public	signature:(QByteArray& bytes)
ZTPprotocol::addPara	ztpprotocol.cpp	/^void ZTPprotocol::addPara(const QString& paraName,const QString& paraValue)$/;"	f	class:ZTPprotocol	signature:(const QString& paraName,const QString& paraValue)
ZTPprotocol::addPara	ztpprotocol.h	/^    void addPara(const QString& paraName,const QString& paraValue);$/;"	p	class:ZTPprotocol	access:public	signature:(const QString& paraName,const QString& paraValue)
ZTPprotocol::clear	ztpprotocol.cpp	/^void ZTPprotocol::clear()$/;"	f	class:ZTPprotocol	signature:()
ZTPprotocol::clear	ztpprotocol.h	/^    void clear();$/;"	p	class:ZTPprotocol	access:public	signature:()
ZTPprotocol::count	ztpprotocol.h	/^    int count()const{return map.count();}$/;"	f	class:ZTPprotocol	access:public	signature:() const
ZTPprotocol::genarate	ztpprotocol.cpp	/^void ZTPprotocol::genarate()$/;"	f	class:ZTPprotocol	signature:()
ZTPprotocol::genarate	ztpprotocol.h	/^    void genarate();$/;"	p	class:ZTPprotocol	access:public	signature:()
ZTPprotocol::getPara	ztpprotocol.h	/^    QString getPara(const QString& paraName){return map[paraName];}$/;"	f	class:ZTPprotocol	access:public	signature:(const QString& paraName)
ZTPprotocol::getRwaData	ztpprotocol.h	/^    QByteArray& getRwaData()const{return rawData;}$/;"	f	class:ZTPprotocol	access:public	signature:() const
ZTPprotocol::load	ztpprotocol.cpp	/^void ZTPprotocol::load(QByteArray& bytes)$/;"	f	class:ZTPprotocol	signature:(QByteArray& bytes)
ZTPprotocol::load	ztpprotocol.h	/^    void load(QByteArray& bytes);$/;"	p	class:ZTPprotocol	access:public	signature:(QByteArray& bytes)
ZTPprotocol::map	ztpprotocol.h	/^    QMap<QString, QString> map;$/;"	m	class:ZTPprotocol	access:private
ZTPprotocol::paras	ztpprotocol.h	/^    QList<QString> paras(){return map.keys();}$/;"	f	class:ZTPprotocol	access:public	signature:()
ZTPprotocol::rawData	ztpprotocol.h	/^    QByteArray rawData;$/;"	m	class:ZTPprotocol	access:private
ZTPprotocol::removePara	ztpprotocol.cpp	/^void ZTPprotocol::removePara(const QString& paraName)$/;"	f	class:ZTPprotocol	signature:(const QString& paraName)
ZTPprotocol::removePara	ztpprotocol.h	/^    void removePara(const QString& paraName);$/;"	p	class:ZTPprotocol	access:public	signature:(const QString& paraName)
_Socketlistener	ztpmanager.h	/^    QUdpSocket _Socketlistener;$/;"	m	class:ZTPManager	access:private
addPara	ztpprotocol.cpp	/^void ZTPprotocol::addPara(const QString& paraName,const QString& paraValue)$/;"	f	class:ZTPprotocol	signature:(const QString& paraName,const QString& paraValue)
addPara	ztpprotocol.h	/^    void addPara(const QString& paraName,const QString& paraValue);$/;"	p	class:ZTPprotocol	access:public	signature:(const QString& paraName,const QString& paraValue)
checksum	ztpmanager.h	/^        quint16 checksum;$/;"	m	class:ZTPManager::Fragment	access:public
clear	ztpprotocol.cpp	/^void ZTPprotocol::clear()$/;"	f	class:ZTPprotocol	signature:()
clear	ztpprotocol.h	/^    void clear();$/;"	p	class:ZTPprotocol	access:public	signature:()
count	ztpprotocol.h	/^    int count()const{return map.count();}$/;"	f	class:ZTPprotocol	access:public	signature:() const
data	ztpmanager.h	/^        QByteArray data;$/;"	m	class:ZTPManager::Fragment	access:public
fragment_count	ztpmanager.h	/^        quint16 fragment_count;$/;"	m	class:ZTPManager::Fragment	access:public
fragment_offset	ztpmanager.h	/^        quint16 fragment_offset;$/;"	m	class:ZTPManager::Fragment	access:public
fun	mainwindow.cpp	/^void MainWindow::fun()$/;"	f	class:MainWindow	signature:()
fun	mainwindow.h	/^    void fun();$/;"	p	class:MainWindow	access:private	signature:()
genarate	ztpprotocol.cpp	/^void ZTPprotocol::genarate()$/;"	f	class:ZTPprotocol	signature:()
genarate	ztpprotocol.h	/^    void genarate();$/;"	p	class:ZTPprotocol	access:public	signature:()
generate	ztpmanager.h	/^        void generate()$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
generateChecksum	ztpmanager.h	/^        quint16 generateChecksum(){$/;"	f	class:ZTPManager::Fragment	access:private	signature:()
getOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::getOneZtp(ZTPprotocol& ztp)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp)
getOneZtp	ztpmanager.h	/^    ResultState getOneZtp(ZTPprotocol& ztp);\/\/异步读取$/;"	p	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp)
getPara	ztpprotocol.h	/^    QString getPara(const QString& paraName){return map[paraName];}$/;"	f	class:ZTPprotocol	access:public	signature:(const QString& paraName)
getRwaData	ztpprotocol.h	/^    QByteArray& getRwaData()const{return rawData;}$/;"	f	class:ZTPprotocol	access:public	signature:() const
identifier	ztpmanager.h	/^        quint16 identifier;$/;"	m	class:ZTPManager::Fragment	access:public
isValid	ztpmanager.h	/^        bool isValid(){return checksum == generateChecksum();}$/;"	f	class:ZTPManager::Fragment	access:public	signature:()
len	ztpmanager.h	/^        quint32 len;\/\/仅数据正文长度$/;"	m	class:ZTPManager::Fragment	access:public
load	ztpprotocol.cpp	/^void ZTPprotocol::load(QByteArray& bytes)$/;"	f	class:ZTPprotocol	signature:(QByteArray& bytes)
load	ztpprotocol.h	/^    void load(QByteArray& bytes);$/;"	p	class:ZTPprotocol	access:public	signature:(QByteArray& bytes)
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
map	ztpprotocol.h	/^    QMap<QString, QString> map;$/;"	m	class:ZTPprotocol	access:private
onRead	ztpmanager.h	/^    void onRead();$/;"	p	class:ZTPManager	access:private	signature:()
on_pushButton_2_clicked	mainwindow.cpp	/^void MainWindow::on_pushButton_2_clicked()$/;"	f	class:MainWindow	signature:()
on_pushButton_2_clicked	mainwindow.h	/^    void on_pushButton_2_clicked();$/;"	p	class:MainWindow	access:private	signature:()
on_pushButton_clicked	mainwindow.cpp	/^void MainWindow::on_pushButton_clicked()$/;"	f	class:MainWindow	signature:()
on_pushButton_clicked	mainwindow.h	/^    void on_pushButton_clicked();$/;"	p	class:MainWindow	access:private	signature:()
operator <	ztpmanager.h	/^        bool operator <(const Fragment& frag)$/;"	f	class:ZTPManager::Fragment	access:public	signature:(const Fragment& frag)
paras	ztpprotocol.h	/^    QList<QString> paras(){return map.keys();}$/;"	f	class:ZTPprotocol	access:public	signature:()
rawData	ztpprotocol.h	/^    QByteArray rawData;$/;"	m	class:ZTPprotocol	access:private
rawPkg	ztpmanager.h	/^        QByteArray rawPkg;$/;"	m	class:ZTPManager::Fragment	access:public
readyRead	ztpmanager.h	/^    void readyRead();$/;"	p	class:ZTPManager	access:private	signature:()
removePara	ztpprotocol.cpp	/^void ZTPprotocol::removePara(const QString& paraName)$/;"	f	class:ZTPprotocol	signature:(const QString& paraName)
removePara	ztpprotocol.h	/^    void removePara(const QString& paraName);$/;"	p	class:ZTPprotocol	access:public	signature:(const QString& paraName)
ui	mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
waitOneZtp	ztpmanager.cpp	/^ZTPManager::ResultState ZTPManager::waitOneZtp(ZTPprotocol& ztp,int msecs)$/;"	f	class:ZTPManager	signature:(ZTPprotocol& ztp,int msecs)
waitOneZtp	ztpmanager.h	/^    ResultState waitOneZtp(ZTPprotocol& ztp,int msecs = 3000);\/\/同步读取$/;"	p	class:ZTPManager	access:public	signature:(ZTPprotocol& ztp,int msecs = 3000)
ztpList	ztpmanager.h	/^    QList<QByteArray> ztpList;$/;"	m	class:ZTPManager	access:private
ztpm	mainwindow.h	/^    ZTPManager* ztpm;$/;"	m	class:MainWindow	access:private
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow	signature:()
~MainWindow	mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
